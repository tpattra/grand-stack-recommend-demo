type User {
  userId: String
  name: String

  findUserByName(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE toLower(u.name) =~ toLower( .*$substring.* ) RETURN movie"
    )
}

 type Movie {
  movieId: ID!
  title: String
  genres: [Genre]
  year: Int
  poster: String
  plot: String
  imdbRating: Float
  sameGenre(first: Int=3 offset: Int=3): [Movie]
    @cypher(
      statement: "MATCH (this)-[:IN_GENRE]->(g:Genre)<-[:IN_GENRE]-(movie:Movie) RETURN movie"
    )
  recommend(first: Int=3 offset: Int=3): [Movie]
      @cypher(
        statement:"""MATCH (this)<-[r1:RATED]-(:User)-[r2:RATED]->(m:Movie)
                         WHERE r2.rating >= 3
                         RETURN m, sum(r2.rating) as ratings ORDER BY ratings DESC"""
      )

  findMovieByTitle(title: String): [Movie]
    @cypher(
    statement: "MATCH (m:Movie) WHERE toLower(m.title) =~ toLower( .*$title.* ) RETURN movie"
  )
}

type Director
{
  name: String
}

type Actor
{
  name: String
}

type Genre
{
  name: String
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )
}
