type User {
  userId: String
  name: String

  findUserByName(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE toLower(u.name) =~ toLower( .*$substring.* ) RETURN movie"
    )
}

 type Movie {
  movieId: ID!
  title: String
  genres: [String]
  year: Int
  poster: String
  plot: String
  imdbRating: Float

  findMovieByTitle(title: String): [Movie]
    @cypher(
    statement: "MATCH (m:Movie) WHERE toLower(m.title) =~ toLower( .*$title.* ) RETURN movie"
  )

  findRecommendedMovies(movieId: String, limit: Int): [Movie]
    @cypher(
      statement: "MATCH (m:Movie {movieId: $movieId})-[:IN_GENRE]->(g:Genre)<-[:IN_GENRE]-(movie:Movie)
                  WITH m, movie, COUNT(*) AS genreOverlap
                  MATCH (m)<-[:RATED]-(:User)-[r:RATED]->(movie:Movie)
                  WHERE r.rating > 3
                  WITH movie,genreOverlap, COUNT(*) AS userRatedScore
                  RETURN movie ORDER BY (0.5 * genreOverlap) + (0.5 * userRatedScore)  DESC LIMIT $limit;"
    )


}

type Director
{
  name: String
}

type Actor
{
  name: String
}

type Genre
{
  name: String
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )
}
